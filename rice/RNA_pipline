configfile: "config.yaml"

rule all:
		input:
				expand('fastqc/raw/{sample}_1_fastqc.html',sample=config['samples']),
				expand('fastqc/raw/{sample}_2_fastqc.html',sample=config['samples']),
				expand('bam/{sample}.bam.bai',sample=config['samples']),
				expand('count/{sample}_cnt.tsv',sample=config['samples']),
				expand('clean/{sample}_1_paired.fq.gz',sample=config['samples']),
				expand('clean/{sample}_2_paired.fq.gz',sample=config['samples']),
				expand('bam/{sample}.bam',sample=config['samples']),
				expand('count/{sample}_sort_name.bam',sample=config['samples']),
				expand('count/{sample}_cnt.tsv',sample=config['samples']),
				'count/all_sample_cnt.tsv',
				'table/expr_table_cpm_all.tsv',
				'table/expr_table_cpm_DEG.tsv',
				'figure/DEG_barplot.pdf',
				'RData/edgeR_output.RData',
				'figure/PCA.pdf',
				'table/DEG_test'

rule fastqc_PE:
	input:
		config['path']+"/{sample}_1.fq.gz",
		config['path']+'/{sample}_2.fq.gz'
	output:
		'fastqc/raw/{sample}_1_fastqc.html',
		'fastqc/raw/{sample}_2_fastqc.html'
	shell:
		"fastqc -t 2 -o fastqc/raw {input}"

rule trimmomatic_PE:
	input:
		r1=config['path']+"/{sample}_1.fq.gz",
		r2=config['path']+'/{sample}_2.fq.gz'
	output:
		r1_paired='clean/{sample}_1_paired.fq.gz',
		r2_paired='clean/{sample}_2_paired.fq.gz',
		r1_unpaired='clean/{sample}_1_unpaired.fq.gz',
		r2_unpaired='clean/{sample}_2_unpaired.fq.gz'
	params:
		adapter=config['adapter']
	shell:
		'trimmomatic PE -threads 3 {input.r1} {input.r2} {output.r1_paired} {output.r1_unpaired} {output.r2_paired} {output.r2_unpaired} ILLUMINACLIP:{params.adapter}:2:30:10 LEADING:3 TRAILING:3 SLIDINGWINDOW:4:15 MINLEN:36'
	
rule hisat2_PE:
	input:
		r1 = 'clean/{sample}_1_paired.fq.gz',
		r2 = 'clean/{sample}_2_paired.fq.gz'
	output:
		bam="bam/{sample}.bam"
	params:
		prefix='bam/{sample}',
		cpu=config['cpu'],
		index=config['index'],
		strandness_hisat2=config["strandness_hisat2"],
	shell:
		"hisat2 --rna-strandness {params.strandness_hisat2} -p {params.cpu} --dta -x {params.index} -1 {input.r1} -2 {input.r2} |samtools view -Shub|samtools sort - -T {params.prefix} -o {output.bam}"

rule bam_index:
	input:
		bam='bam/{sample}.bam'
	output:
		bai="bam/{sample}.bam.bai"
	shell:
		'samtools index {input.bam} {output.bai}'

rule sort_by_name:
	input:
		'bam/{sample}.bam'
	output:
		'count/{sample}_sort_name.bam'
	shell:
		'samtools sort -n {input} -o {output}'

rule htseq:
	input:
		bam = 'count/{sample}_sort_name.bam'
	output:
		cnt = 'count/{sample}_cnt.tsv'
	params:
		gtf=config["gtf"],
		strandness_htseq=config['strandness_htseq'],
	shell:
		'htseq-count --format=bam --order=name --stranded={params.strandness_htseq} {input.bam} {params.gtf} > {output.cnt}'

rule all_sample_cnt:
	input:
		['count/{sample}_cnt.tsv'.format(sample=x) for x in config['samples']]
	output:
		count_all = 'count/all_sample_cnt.tsv'
	params:
		config_file = 'config.yaml',
		Rscript = config['Rscript_path']
	shell:
		'Rscript {params.Rscript}/all_sample_cnt.R {params.config_file} count {output}'

rule edgeR:
	input:
		count_all = 'count/all_sample_cnt.tsv',
	output:
		cpm_all = 'table/expr_table_cpm_all.tsv',
		cpm_DEG = 'table/expr_table_cpm_DEG.tsv',
		DEG_barplot = "figure/DEG_barplot.pdf",
		RData = 'RData/edgeR_output.RData'
	params:
		config_file = 'config.yaml',
		Rscript = config['Rscript_path']
	shell:
		'Rscript {params.Rscript}/edgeR1.R {params.config_file} {input}'

rule PCA:
	input:
		cpm_all='table/expr_table_cpm_all.tsv'
	output:
		pca_output = 'figure/PCA.pdf'
	params:
		config_file = 'config.yaml',
		Rscript = config['Rscript_path']
	shell:
		'Rscript {params.Rscript}/PCA.R {params.config_file} {input} {output}'

rule DEG_files:
	input:
		'table/expr_table_cpm_all.tsv'
	output:
		'table/DEG_test'
	params:
		output_path='table/',
		config_file='config.yaml',
		Rscript = config['Rscript_path']
	shell:
		'Rscript {params.Rscript}/DEG_files.R {params.config_file} {input} {output} {params.output_path}'
